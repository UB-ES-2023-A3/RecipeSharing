{"ast":null,"code":"import { vModelDynamic as _vModelDynamic, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, withDirectives as _withDirectives, normalizeClass as _normalizeClass, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"text-field-container\"\n};\nconst _hoisted_2 = [\"type\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.message = $event),\n    onBlur: _cache[1] || (_cache[1] = (...args) => $options.saveMessage && $options.saveMessage(...args)),\n    onFocus: _cache[2] || (_cache[2] = (...args) => $options.clearDefaultMessage && $options.clearDefaultMessage(...args)),\n    ref: \"messageInput\",\n    onInput: _cache[3] || (_cache[3] = (...args) => $options.updateTextFieldValue && $options.updateTextFieldValue(...args)),\n    style: _normalizeStyle($options.inputStyle),\n    type: $data.isPasswordVisible ? 'text' : 'password',\n    onKeydown: _cache[4] || (_cache[4] = (...args) => $options.handleEnterKey && $options.handleEnterKey(...args))\n  }, null, 44 /* STYLE, PROPS, HYDRATE_EVENTS */, _hoisted_2), [[_vModelDynamic, $data.message]])]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = _withModifiers((...args) => $options.togglePasswordVisibility && $options.togglePasswordVisibility(...args), [\"prevent\"])),\n    class: \"password-toggle-button\"\n  }, [_createElementVNode(\"i\", {\n    class: _normalizeClass($data.isPasswordVisible ? 'far fa-eye' : 'far fa-eye-slash')\n  }, null, 2 /* CLASS */)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_hoisted_1","$data","message","$event","onBlur","_cache","args","$options","saveMessage","onFocus","clearDefaultMessage","ref","onInput","updateTextFieldValue","style","_normalizeStyle","inputStyle","type","isPasswordVisible","onKeydown","handleEnterKey","onClick","_withModifiers","togglePasswordVisibility","_normalizeClass"],"sources":["C:\\Users\\Usuario\\Desktop\\Adri\\UB\\4º\\1º\\Ingeniería de Software\\Practica\\RecipeSharing\\frontend\\src\\components\\AppTextFieldPassword.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"text-field-container\">\n            <input\n                    v-model=\"message\"\n                    @blur=\"saveMessage\"\n                    @focus=\"clearDefaultMessage\"\n                    ref=\"messageInput\"\n                    @input=\"updateTextFieldValue\"\n                    :style=\"inputStyle\"\n                    :type=\"isPasswordVisible ? 'text' : 'password'\"\n                    @keydown=\"handleEnterKey\"\n            >\n        </div>\n        <button @click.prevent=\"togglePasswordVisibility\" class=\"password-toggle-button\">\n            <i :class=\"isPasswordVisible ? 'far fa-eye' : 'far fa-eye-slash'\"></i>\n        </button>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    name: \"AppTextFieldPassword.vue\",\n    props: {\n        defaultMessage: String,\n    },\n    data() {\n        return {\n            message: this.defaultMessage,\n            isSaved: false,\n            isPasswordVisible: false,\n            clearedOnce: false,\n        };\n    },\n    computed: {\n        inputStyle() {\n            return {\n                backgroundColor: this.isSaved ? \"#eea94d\" : \"#FCE4A4\",\n                color: this.isSaved ? \"white\" : \"black\",\n                padding: \"10px\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"5px\",\n                width: \"100%\",\n                minWidth: \"300px\",\n                display: \"block\",\n                margin: \"0 auto\",\n                marginTop: \"10px\",\n            };\n        },\n    },\n    methods: {\n        saveMessage() {\n            this.isSaved = true;\n            this.$refs.messageInput.blur();\n        },\n        clearDefaultMessage() {\n            if (!this.clearedOnce) {\n                this.clearedOnce = true;\n                this.message = '';\n            }\n        },\n        togglePasswordVisibility() {\n            this.isPasswordVisible = !this.isPasswordVisible;\n        },\n        updateTextFieldValue() {\n            this.$emit('update:textValue', this.message);\n        },\n        handleEnterKey(event) {\n            if (event.key === 'Enter') {\n                event.preventDefault(); // Evita el comportamiento predeterminado (envío del formulario) al presionar Enter\n            }\n        },\n    },\n};\n</script>\n\n<style>\n\n.text-field-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.password-toggle-button {\n    background-color: #FCE4A4;\n    border: 1px;\n    border-radius: 5px;\n    margin-top: 5px;\n}\n\n</style>"],"mappings":";;EAEaA,KAAK,EAAC;AAAsB;;;uBADrCC,mBAAA,CAgBM,cAfFC,mBAAA,CAWM,OAXNC,UAWM,G,gBAVFD,mBAAA,CASC;+DARgBE,KAAA,CAAAC,OAAO,GAAAC,MAAA;IACfC,MAAI,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACjBG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,mBAAA,IAAAH,QAAA,CAAAG,mBAAA,IAAAJ,IAAA,CAAmB;IAC3BK,GAAG,EAAC,cAAc;IACjBC,OAAK,EAAAP,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAM,oBAAA,IAAAN,QAAA,CAAAM,oBAAA,IAAAP,IAAA,CAAoB;IAC3BQ,KAAK,EAAAC,eAAA,CAAER,QAAA,CAAAS,UAAU;IACjBC,IAAI,EAAEhB,KAAA,CAAAiB,iBAAiB;IACvBC,SAAO,EAAAd,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAa,cAAA,IAAAb,QAAA,CAAAa,cAAA,IAAAd,IAAA,CAAc;iFAPfL,KAAA,CAAAC,OAAO,E,KAU5BH,mBAAA,CAES;IAFAsB,OAAK,EAAAhB,MAAA,QAAAA,MAAA,MAAAiB,cAAA,KAAAhB,IAAA,KAAUC,QAAA,CAAAgB,wBAAA,IAAAhB,QAAA,CAAAgB,wBAAA,IAAAjB,IAAA,CAAwB;IAAET,KAAK,EAAC;MACpDE,mBAAA,CAAsE;IAAlEF,KAAK,EAAA2B,eAAA,CAAEvB,KAAA,CAAAiB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}