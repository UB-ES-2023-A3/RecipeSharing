{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-154cb5ee\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  value: \"\",\n  disabled: \"\"\n};\nconst _hoisted_3 = [\"label\"];\nconst _hoisted_4 = [\"value\"];\nconst _hoisted_5 = {\n  class: \"selected-values\"\n};\nconst _hoisted_6 = {\n  class: \"selected-ingredients-title\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"remove-button\"\n}, \"✖\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Dropdown select to choose options \"), _withDirectives(_createElementVNode(\"select\", {\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.addSelectedOption && $options.addSelectedOption(...args)),\n    class: \"full-width-dropdown\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.localSelectedValue = $event)\n  }, [_createElementVNode(\"option\", _hoisted_2, \"Select \" + _toDisplayString($props.label), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, group => {\n    return _openBlock(), _createElementBlock(\"optgroup\", {\n      label: group.groupName,\n      key: group.groupName\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(group.options, option => {\n      return _openBlock(), _createElementBlock(\"option\", {\n        value: option,\n        key: option\n      }, _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_4);\n    }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.localSelectedValue]]), _createCommentVNode(\" Display selected values and allow removal \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"h2\", _hoisted_6, _toDisplayString($props.groupTitle), 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.selectedOptions, (selected, index) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      class: \"selected-value\",\n      key: index,\n      onClick: $event => $options.removeSelectedOption(index)\n    }, [_createTextVNode(_toDisplayString(selected) + \" \", 1 /* TEXT */), _hoisted_8], 8 /* PROPS */, _hoisted_7);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","value","disabled","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","onChange","_cache","args","$options","addSelectedOption","$data","localSelectedValue","$event","_hoisted_2","_toDisplayString","$props","label","_Fragment","_renderList","options","group","groupName","key","option","_hoisted_4","_hoisted_5","_hoisted_6","groupTitle","selectedOptions","selected","index","onClick","removeSelectedOption","_hoisted_8"],"sources":["C:\\Users\\Usuario\\Desktop\\Adri\\UB\\4º\\1º\\Ingeniería de Software\\Practica\\RecipeSharing\\frontend\\src\\components\\AppDropdownSelect.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <!-- Dropdown select to choose options -->\n        <select @change=\"addSelectedOption\" class=\"full-width-dropdown\" v-model=\"localSelectedValue\">\n            <option value=\"\" disabled>Select {{ label }}</option>\n            <optgroup v-for=\"group in options\" :label=\"group.groupName\" :key=\"group.groupName\">\n                <option v-for=\"option in group.options\" :value=\"option\" :key=\"option\">{{ option }}</option>\n            </optgroup>\n        </select>\n\n        <!-- Display selected values and allow removal -->\n        <div class=\"selected-values\">\n            <h2 class=\"selected-ingredients-title\">{{ groupTitle }}</h2>\n            <button class=\"selected-value\" v-for=\"(selected, index) in selectedOptions\" :key=\"index\"\n                    @click=\"removeSelectedOption(index)\">\n                {{ selected }} <span class=\"remove-button\">✖</span>\n            </button>\n        </div>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    props: {\n        options: Array, // List of options grouped by category\n        selectedValue: Array, // Change the prop type to Array for multiple selections\n        label: String, // Label for the select dropdown\n        groupTitle: String, // Title for the selected group\n        choose: Boolean\n    },\n    data() {\n        return {\n            localSelectedValue: this.selectedValue, // Use a local value to bind to the select\n            selectedOptions: [], // List to store selected items\n        };\n    },\n    methods: {\n        addSelectedOption() {\n            const selectedValue = this.localSelectedValue;\n            // Check if the selected value is valid and not already selected\n            if (this.choose == false) {\n                this.selectedOptions = [];\n            }\n            if (selectedValue && !this.selectedOptions.includes(selectedValue)) {\n                this.selectedOptions.push(selectedValue);\n                this.$emit('update:selectedValue', this.selectedOptions);\n            }\n        },\n        removeSelectedOption(index) {\n            this.selectedOptions.splice(index, 1);\n        },\n    },\n};\n\n</script>\n\n<style scoped>\n\n.container {\n    background-color: #FCE4A4;\n    margin: 2px 5px;\n    padding: 10px;\n    border-radius: 10px;\n}\n\n.remove-button {\n    cursor: pointer;\n    margin-left: 10px;\n}\n\n.selected-ingredients-title {\n    font-size: 16px;\n    margin-bottom: 2px;\n}\n\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAW;;EAGNC,KAAK,EAAC,EAAE;EAACC,QAAQ,EAAR;;;;;EAOhBF,KAAK,EAAC;AAAiB;;EACpBA,KAAK,EAAC;AAA4B;;gEAGnBG,mBAAA,CAAoC;EAA9BH,KAAK,EAAC;AAAe,GAAC,GAAC;;;uBAdxDI,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBFC,mBAAA,uCAA0C,E,gBAC1CH,mBAAA,CAKS;IALAI,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;IAAET,KAAK,EAAC,qBAAqB;+DAAUY,KAAA,CAAAC,kBAAkB,GAAAC,MAAA;MACvFX,mBAAA,CAAqD,UAArDY,UAAqD,EAA3B,SAAO,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,mB,kBACzCd,mBAAA,CAEWe,SAAA,QAAAC,WAAA,CAFeH,MAAA,CAAAI,OAAO,EAAhBC,KAAK;yBAAtBlB,mBAAA,CAEW;MAFyBc,KAAK,EAAEI,KAAK,CAACC,SAAS;MAAGC,GAAG,EAAEF,KAAK,CAACC;2BACpEnB,mBAAA,CAA2Fe,SAAA,QAAAC,WAAA,CAAlEE,KAAK,CAACD,OAAO,EAAvBI,MAAM;2BAArBrB,mBAAA,CAA2F;QAAlDH,KAAK,EAAEwB,MAAM;QAAGD,GAAG,EAAEC;0BAAWA,MAAM,wBAAAC,UAAA;;2FAHdd,KAAA,CAAAC,kBAAkB,E,GAO3FP,mBAAA,+CAAkD,EAClDH,mBAAA,CAMM,OANNwB,UAMM,GALFxB,mBAAA,CAA4D,MAA5DyB,UAA4D,EAAAZ,gBAAA,CAAlBC,MAAA,CAAAY,UAAU,mB,kBACpDzB,mBAAA,CAGSe,SAAA,QAAAC,WAAA,CAHkDR,KAAA,CAAAkB,eAAe,GAAnCC,QAAQ,EAAEC,KAAK;yBAAtD5B,mBAAA,CAGS;MAHDJ,KAAK,EAAC,gBAAgB;MAA+CwB,GAAG,EAAEQ,KAAK;MAC9EC,OAAK,EAAAnB,MAAA,IAAEJ,QAAA,CAAAwB,oBAAoB,CAACF,KAAK;0CACnCD,QAAQ,IAAG,GAAC,iBAAAI,UAAoC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}