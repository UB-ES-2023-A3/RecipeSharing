{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '../assets/styles/appStyles.css';\nimport AppTextField from '@/components/AppTextField.vue';\nimport AppTextFieldPassword from '@/components/AppTextFieldPassword.vue';\nimport axios from 'axios';\nexport default {\n  name: 'RegisterPage',\n  components: {\n    AppTextField,\n    AppTextFieldPassword\n  },\n  data() {\n    return {\n      // Data properties for username, email, password, and more\n      username: '',\n      usernameError: false,\n      email: '',\n      emailError: false,\n      password: '',\n      passwordError: false,\n      confirmPassword: '',\n      passwordStrength: 0,\n      defaultMessageUsername: 'Introduce your username',\n      defaultMessageEmail: 'Introduce your email',\n      defaultMessagePassword: 'Introduce your password',\n      defaultMessagePasswordCheck: 'Introduce your password again'\n    };\n  },\n  methods: {\n    checkUsername() {\n      this.usernameError = this.username.length < 8 || this.username.length > 16;\n    },\n    checkEmail() {\n      // Check the validity of the entered email\n      const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n      if (!emailRegex.test(this.email)) {\n        this.emailError = true;\n      } else {\n        // Define valid email extensions\n        const validEmailExtensions = ['example.com', 'yourdomain.com', 'gmail.com', 'hotmail.com'];\n        // Split the email to get the domain part\n        const emailParts = this.email.split('@');\n        const emailExtension = emailParts[1];\n        // Check if the email extension is valid\n        this.emailError = !validEmailExtensions.includes(emailExtension);\n      }\n    },\n    checkPassword() {\n      // Check the validity and strength of the entered password\n      const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{8,}$/;\n      this.passwordError = !passwordRegex.test(this.password);\n\n      // Calculate password strength\n      let strength = 0;\n      if (this.password.length >= 8) {\n        strength++;\n      }\n      if (/[a-z]/.test(this.password) && /[A-Z]/.test(this.password)) {\n        strength++;\n      }\n      if (/\\d/.test(this.password)) {\n        strength++;\n      }\n      if (/\\W|_/.test(this.password)) {\n        strength++;\n      }\n      this.passwordStrength = strength / 4 * 100;\n    },\n    clearForm() {\n      this.username = '';\n      this.email = '';\n      this.password = '';\n      this.confirmPassword = '';\n    },\n    async register() {\n      // Check if passwords match\n      if (this.username.length === 0 || this.email.length === 0 || this.password.length === 0 || this.confirmPassword.length === 0) {\n        alert('Complete the form');\n        return;\n      }\n      if (this.password !== this.confirmPassword) {\n        alert('Passwords do not match');\n        return;\n      }\n      try {\n        // Send a registration request to the server\n        alert('entra1');\n        let response = await axios.post('http://localhost:8000/user/', {\n          username: this.username,\n          email: this.email,\n          password: this.password\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        alert('entra');\n        // Check the HTTP status code in the response\n        if (response.status === 200) {\n          // Registration successful, you can handle success here\n          console.log('Registration successful');\n          alert('Registration successful');\n          this.$router.push('/');\n        }\n      } catch (error) {\n        if (error.response) {\n          // Handle network errors\n          if (error.response.status === 400) {\n            // Handle client-side validation errors\n            alert(error.response.data.error);\n          } else if (error.response.status === 500) {\n            // Handle server errors\n            alert('An error occurred while registering.');\n          } else {\n            // Handle other status codes\n            alert('Unexpected error');\n          }\n        } else {\n          // Handle other unexpected errors\n          alert('An error occurred while registering.');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["AppTextField","AppTextFieldPassword","axios","name","components","data","username","usernameError","email","emailError","password","passwordError","confirmPassword","passwordStrength","defaultMessageUsername","defaultMessageEmail","defaultMessagePassword","defaultMessagePasswordCheck","methods","checkUsername","length","checkEmail","emailRegex","test","validEmailExtensions","emailParts","split","emailExtension","includes","checkPassword","passwordRegex","strength","clearForm","register","alert","response","post","headers","status","console","log","$router","push","error"],"sources":["C:\\Users\\Usuario\\Desktop\\Adri\\UB\\4º\\1º\\Ingeniería de Software\\Practica\\RecipeSharing\\frontend\\src\\pages\\RegisterPage.vue"],"sourcesContent":["<template>\n  <div class=\"mainContainer\" style=\"color: black\">\n    <div class=\"form-background\">\n      <div class=\"mainTitle\" style=\"color: #ff5733\">\n        <!-- Title for the registration form with custom color -->\n        <h1>Register</h1>\n      </div>\n      <form @submit.prevent=\"register\" class=\"form\">\n        <div class=\"form-group\">\n          <label for=\"username\">Username:</label>\n          <!-- AppTextField component for username input -->\n          <AppTextField\n            :defaultMessage=\"defaultMessageUsername\"\n            @update:textValue=\"username = $event\"\n            @input=\"checkUsername\"\n          />\n          <div class=\"note\">\n            <p>The username must be between 8 and 16 characters.</p>\n          </div>\n          <p v-if=\"usernameError\" class=\"error\">This username is not valid</p>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email:</label>\n          <!-- AppTextField component for email input -->\n          <AppTextField\n            :defaultMessage=\"defaultMessageEmail\"\n            @update:textValue=\"email = $event\"\n            @input=\"checkEmail\"\n          />\n          <div class=\"note\">\n            <p>Only the following domains are valid: example.com, yourdomain.com, gmail.com, hotmail.com</p>\n          </div>\n          <p v-if=\"emailError\" class=\"error\">This email extension is not valid</p>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Password:</label>\n          <!-- AppTextFieldPassword component for password input -->\n          <AppTextFieldPassword\n            :defaultMessage=\"defaultMessagePassword\"\n            @update:textValue=\"password = $event\"\n            @input=\"checkPassword\"\n          />\n          <div class=\"note\">\n            <p>The password must be at least 8 characters long, contain one uppercase letter, one lowercase\n              letter, one number, and one symbol.</p>\n          </div>\n          <p v-if=\"passwordError\" class=\"error\">This password is not valid</p>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"confirmPassword\">Confirm Password:</label>\n          <!-- AppTextFieldPassword component for password confirmation input -->\n          <AppTextFieldPassword\n            :defaultMessage=\"defaultMessagePasswordCheck\"\n            @update:textValue=\"confirmPassword = $event\"\n          />\n        </div>\n        <div class=\"password-strength\">\n          Password Strength:\n          <div class=\"password-strength-meter\">\n            <div class=\"password-strength-bar\" :style=\"{ width: passwordStrength + '%' }\"></div>\n          </div>\n        </div>\n        <p>\n          <!-- Router link to navigate to the login page if the user already has an account -->\n          <router-link to=\"/login\">Already have an account? Log in</router-link>\n        </p>\n        <div class=\"secondaryContainer\" style=\"background-color: white\">\n          <!-- Register button to submit the form -->\n          <button type=\"submit\" class=\"submit-button\">Register</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport '../assets/styles/appStyles.css'\nimport AppTextField from '@/components/AppTextField.vue'\nimport AppTextFieldPassword from '@/components/AppTextFieldPassword.vue'\nimport axios from 'axios'\n\nexport default {\n  name: 'RegisterPage',\n  components: {AppTextField, AppTextFieldPassword},\n  data () {\n    return {\n      // Data properties for username, email, password, and more\n      username: '',\n      usernameError: false,\n      email: '',\n      emailError: false,\n      password: '',\n      passwordError: false,\n      confirmPassword: '',\n      passwordStrength: 0,\n      defaultMessageUsername: 'Introduce your username',\n      defaultMessageEmail: 'Introduce your email',\n      defaultMessagePassword: 'Introduce your password',\n      defaultMessagePasswordCheck: 'Introduce your password again'\n    }\n  },\n  methods: {\n    checkUsername () {\n      this.usernameError = this.username.length < 8 || this.username.length > 16\n    },\n    checkEmail () {\n      // Check the validity of the entered email\n      const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\n      if (!emailRegex.test(this.email)) {\n        this.emailError = true\n      } else {\n        // Define valid email extensions\n        const validEmailExtensions = ['example.com', 'yourdomain.com', 'gmail.com', 'hotmail.com']\n        // Split the email to get the domain part\n        const emailParts = this.email.split('@')\n        const emailExtension = emailParts[1]\n        // Check if the email extension is valid\n        this.emailError = !validEmailExtensions.includes(emailExtension)\n      }\n    },\n    checkPassword () {\n      // Check the validity and strength of the entered password\n      const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{8,}$/\n      this.passwordError = !passwordRegex.test(this.password)\n\n      // Calculate password strength\n      let strength = 0\n      if (this.password.length >= 8) {\n        strength++\n      }\n      if (/[a-z]/.test(this.password) && /[A-Z]/.test(this.password)) {\n        strength++\n      }\n      if (/\\d/.test(this.password)) {\n        strength++\n      }\n      if (/\\W|_/.test(this.password)) {\n        strength++\n      }\n      this.passwordStrength = (strength / 4) * 100\n    },\n    clearForm () {\n      this.username = ''\n      this.email = ''\n      this.password = ''\n      this.confirmPassword = ''\n    },\n    async register () {\n      // Check if passwords match\n      if (this.username.length === 0 || this.email.length === 0 ||\n        this.password.length === 0 || this.confirmPassword.length === 0) {\n        alert('Complete the form')\n        return\n      }\n      if (this.password !== this.confirmPassword) {\n        alert('Passwords do not match')\n        return\n      }\n      try {\n        // Send a registration request to the server\n        alert('entra1')\n        let response = await axios.post('http://localhost:8000/user/', {\n          username: this.username,\n          email: this.email,\n          password: this.password\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        alert('entra')\n        // Check the HTTP status code in the response\n        if (response.status === 200) {\n          // Registration successful, you can handle success here\n          console.log('Registration successful')\n          alert('Registration successful')\n          this.$router.push('/')\n        }\n      } catch (error) {\n        if (error.response) {\n          // Handle network errors\n          if (error.response.status === 400) {\n            // Handle client-side validation errors\n            alert(error.response.data.error)\n          } else if (error.response.status === 500) {\n            // Handle server errors\n            alert('An error occurred while registering.')\n          } else {\n            // Handle other status codes\n            alert('Unexpected error')\n          }\n        } else {\n          // Handle other unexpected errors\n          alert('An error occurred while registering.')\n        }\n      }\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n\n.password-strength {\n  font-weight: bold;\n}\n\n.password-strength-meter {\n  height: 10px;\n  background-color: #ccc;\n  border-radius: 5px;\n  margin-top: 10px;\n  overflow: hidden;\n}\n\n.password-strength-bar {\n  height: 100%;\n  background-color: #4CAF50;\n  width: 0;\n  transition: width 0.3s;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}