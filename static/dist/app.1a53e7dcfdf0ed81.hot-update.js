"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdatefrontend"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=script&lang=js":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=script&lang=js ***!
  \**********************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/lib/axios.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data() {\n    return {\n      loginUsernameOrEmail: \"\",\n      loginUsername: \"\",\n      loginEmail: \"\",\n      loginPassword: \"\",\n      registerUsername: \"\",\n      registerEmail: \"\",\n      registerPassword: \"\",\n      registerPasswordConfirm: \"\",\n      registerPasswordStrength: 0,\n      strength: 0,\n      showLoginPassword: false,\n      showRegisterPassword: false,\n      showRegisterPasswordConfirmation: false,\n      showLogin: true,\n      logged: false\n    };\n  },\n  methods: {\n    togglePanel(isSignUp) {\n      alert(this.showLoginForm);\n      const container = document.querySelector('.container');\n      const signUpContainer = document.querySelector('.form-container');\n      if (isSignUp) {\n        container.classList.add('right-panel-active');\n        signUpContainer.style.display = '';\n        signUpContainer.style.justifyContent = 'none';\n        signUpContainer.style.overflow = 'auto';\n        this.showLoginForm = false;\n      } else {\n        container.classList.remove('right-panel-active');\n        signUpContainer.style.display = 'flex';\n        signUpContainer.style.justifyContent = 'center'; // You might need to adjust this line\n        signUpContainer.style.overflow = '';\n        this.showLoginForm = true;\n      }\n    },\n    toggleShowRegisterPassword() {\n      this.showRegisterPassword = !this.showRegisterPassword;\n    },\n    toggleShowRegisterPasswordConfirmation() {\n      this.showRegisterPasswordConfirmation = !this.showRegisterPasswordConfirmation;\n    },\n    toggleShowLoginPassword() {\n      this.showLoginPassword = !this.showLoginPassword;\n    },\n    checkUsername() {\n      const usernameInput = document.getElementById('registerUsernameInput');\n      if (this.registerUsername.length !== 0) {\n        if (this.registerUsername.length < 8 || this.registerUsername.length > 16) {\n          usernameInput.style.border = '1px solid red';\n        } else {\n          usernameInput.style.border = '';\n        }\n      } else {\n        usernameInput.style.border = '';\n      }\n    },\n    checkEmail() {\n      // Check the validity of the entered email\n      const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n      const emailInput = document.getElementById('registerEmailInput');\n      if (this.registerEmail.length != 0) {\n        if (!emailRegex.test(this.registerEmail)) {\n          emailInput.style.border = '1px solid red';\n        } else {\n          // Define valid email extensions\n          const validEmailExtensions = [\"example.com\", \"yourdomain.com\", \"gmail.com\", \"hotmail.com\"];\n          // Split the email to get the domain part\n          const emailParts = this.registerEmail.split(\"@\");\n          const emailExtension = emailParts[1];\n          // Check if the email extension is valid\n          if (!validEmailExtensions.includes(emailExtension)) {\n            emailInput.style.border = '1px solid red';\n          } else {\n            emailInput.style.border = '';\n          }\n        }\n      }\n    },\n    checkPassword() {\n      // Check the validity and strength of the entered password\n      const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W_]).{8,}$/;\n      const passwordInput = document.getElementById('registerPasswordInput');\n      if (this.registerPassword.length != 0) {\n        if (!passwordRegex.test(this.registerPassword)) {\n          passwordInput.style.border = '1px solid red';\n        } else {\n          passwordInput.style.border = '';\n        }\n\n        // Calculate password strength\n        let strength = 0;\n        if (this.registerPassword.length >= 8) {\n          strength++;\n        }\n        if (/[a-z]/.test(this.registerPassword) && /[A-Z]/.test(this.registerPassword)) {\n          strength++;\n        }\n        if (/\\d/.test(this.registerPassword)) {\n          strength++;\n        }\n        if (/\\W|_/.test(this.registerPassword)) {\n          strength++;\n        }\n        this.registerPasswordStrength = strength / 4 * 100;\n      } else {\n        passwordInput.style.border = '';\n      }\n    },\n    async login() {\n      // Determine if the input is an email or username\n      if (this.loginUsernameOrEmail === 0 || this.loginPassword.length === 0) {\n        alert(\"Complete the form\");\n        return;\n      }\n      let loginIdentifier = this.loginUsernameOrEmail;\n      if (loginIdentifier.match(/^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/)) {\n        // If it matches the email format, set it as an email\n        this.loginEmail = loginIdentifier;\n      } else {\n        // Otherwise, set it as a username\n        this.loginUsername = loginIdentifier;\n      }\n      try {\n        let response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post('/login/', {\n          username: this.loginUsername,\n          email: this.loginEmail,\n          password: this.loginPassword\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          // Successful login, perform necessary actions\n          alert(\"Logged!\"); // Display a success message\n          this.logged = true; // Set the logged flag to true\n          localStorage.setItem('logged', this.logged); // Store the logged status in local storage\n          localStorage.setItem('username', this.loginUsername);\n          this.$emit('login-success', this.logged); // Emit a custom event indicating login success\n          this.$emit('username-success', this.loginUsername);\n          this.$emit('email-success', this.loginEmail);\n          this.$emit('password-success', this.loginPassword);\n          this.$router.push('/'); // Redirect to the home page\n        }\n      } catch (error) {\n        if (error.response) {\n          // Handle login failure (e.g., display an error message).\n          if (error.response.status === 400) {\n            alert(error.response.data.error);\n          } else if (error.response.status === 500) {\n            alert(\"An error occurred while registering.\");\n          } else {\n            // Handle other status codes\n            alert(\"Unexpected error\");\n          }\n        } else {\n          // Handle other errors.\n          console.error(\"An error occurred while logging in.\");\n        }\n      }\n    },\n    async register() {\n      // Check if passwords match\n      if (this.registerUsername.length === 0 || this.registerEmail.length === 0 || this.registerPassword.length === 0 || this.registerPasswordConfirm.length === 0) {\n        alert(\"Complete the form\");\n        return;\n      }\n      if (this.registerPassword !== this.registerPasswordConfirm) {\n        alert(\"Passwords do not match\");\n        return;\n      }\n      try {\n        // Send a registration request to the server\n        let response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post('/register/', {\n          username: this.registerUsername,\n          email: this.registerEmail,\n          password: this.registerPassword\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Check the HTTP status code in the response\n        if (response.status === 200) {\n          // Registration successful, you can handle success here\n          console.log(\"Registration successful\");\n          alert(\"Registration successful\");\n          this.$router.push('/');\n        }\n      } catch (error) {\n        if (error.response) {\n          // Handle network errors\n          if (error.response.status === 400) {\n            // Handle client-side validation errors\n            alert(error.response.data.error);\n          } else if (error.response.status === 500) {\n            // Handle server errors\n            alert(\"An error occurred while registering.\");\n          } else {\n            // Handle other status codes\n            alert(\"Unexpected error\");\n          }\n        } else {\n          // Handle other unexpected errors\n          alert(\"An error occurred while registering.\");\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=template&id=579e4332&scoped=true":
/*!**************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=template&id=579e4332&scoped=true ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: function() { return /* binding */ render; }\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n\nconst _withScopeId = n => ((0,vue__WEBPACK_IMPORTED_MODULE_0__.pushScopeId)(\"data-v-579e4332\"), n = n(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.popScopeId)(), n);\nconst _hoisted_1 = {\n  class: \"mainLoginRegisterContainer\"\n};\nconst _hoisted_2 = {\n  class: \"container\",\n  id: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"form-container sign-up-container\"\n};\nconst _hoisted_4 = {\n  class: \"registerForm\",\n  action: \"#\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h1\", null, \"Create Account\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n  class: \"note\"\n}, [/*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"The username must be between 8 and 16 characters.\")], -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n  class: \"note\"\n}, [/*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"Only the following domains are valid: example.com, yourdomain.com, gmail.com, hotmail.com\")], -1 /* HOISTED */));\nconst _hoisted_8 = [\"type\"];\nconst _hoisted_9 = {\n  class: \"input-group-append\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n  class: \"note\"\n}, [/*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"The password must be at least 8 characters long, contain one uppercase letter, one lowercase letter, one number, and one symbol.\")], -1 /* HOISTED */));\nconst _hoisted_11 = [\"type\"];\nconst _hoisted_12 = {\n  class: \"input-group-append\"\n};\nconst _hoisted_13 = {\n  class: \"password-strength\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"Password Strength:\", -1 /* HOISTED */));\nconst _hoisted_15 = {\n  class: \"password-strength-meter\"\n};\nconst _hoisted_16 = {\n  class: \"form-container sign-in-container\"\n};\nconst _hoisted_17 = {\n  class: \"loginForm\",\n  action: \"#\"\n};\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h1\", null, \"Login\", -1 /* HOISTED */));\nconst _hoisted_19 = [\"type\"];\nconst _hoisted_20 = {\n  class: \"input-group-append\"\n};\nconst _hoisted_21 = {\n  class: \"overlay-container\"\n};\nconst _hoisted_22 = {\n  class: \"overlay\"\n};\nconst _hoisted_23 = {\n  class: \"overlay-panel overlay-left\"\n};\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h1\", null, \"Welcome Back!\", -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"Already have an account? Login and explore!\", -1 /* HOISTED */));\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"« Return to main page\", -1 /* HOISTED */));\nconst _hoisted_27 = {\n  class: \"overlay-panel overlay-right\"\n};\nconst _hoisted_28 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"h1\", null, \"Hello!\", -1 /* HOISTED */));\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"Don't have an account yet? Register and start exploring!\", -1 /* HOISTED */));\nconst _hoisted_30 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"p\", null, \"« Return to main page\", -1 /* HOISTED */));\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"router-link\");\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_1, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_2, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_3, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"form\", _hoisted_4, [_hoisted_5, (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    id: \"registerUsernameInput\",\n    type: \"text\",\n    placeholder: \"Username\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => this.registerUsername = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => this.checkUsername && this.checkUsername(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, this.registerUsername]]), _hoisted_6, (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    id: \"registerEmailInput\",\n    type: \"email\",\n    placeholder: \"Email\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => this.registerEmail = $event),\n    onInput: _cache[3] || (_cache[3] = (...args) => this.checkEmail && this.checkEmail(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, this.registerEmail]]), _hoisted_7, (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    id: \"registerPasswordInput\",\n    type: $data.showRegisterPassword ? 'text' : 'password',\n    placeholder: \"Password\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => this.registerPassword = $event),\n    onInput: _cache[5] || (_cache[5] = (...args) => this.checkPassword && this.checkPassword(...args))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_8), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelDynamic, this.registerPassword]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_9, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    class: \"btn btn-primary\",\n    type: \"button\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.toggleShowRegisterPassword && $options.toggleShowRegisterPassword(...args))\n  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"fa\", $data.showRegisterPassword ? 'fa-eye' : 'fa-eye-slash'])\n  }, null, 2 /* CLASS */)])]), _hoisted_10, (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    id: \"registerPasswordInput\",\n    type: $data.showRegisterPasswordConfirmation ? 'text' : 'password',\n    placeholder: \"Password Confirmation\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => this.registerPasswordConfirm = $event)\n  }, null, 8 /* PROPS */, _hoisted_11), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelDynamic, this.registerPasswordConfirm]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_12, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    class: \"btn btn-primary\",\n    type: \"button\",\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.toggleShowRegisterPasswordConfirmation && $options.toggleShowRegisterPasswordConfirmation(...args))\n  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"fa\", $data.showRegisterPasswordConfirmation ? 'fa-eye' : 'fa-eye-slash'])\n  }, null, 2 /* CLASS */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_13, [_hoisted_14, (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_15, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", {\n    class: \"password-strength-bar\",\n    style: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeStyle)({\n      width: $data.registerPasswordStrength + '%'\n    })\n  }, null, 4 /* STYLE */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => this.register && this.register(...args), [\"prevent\"])),\n    style: {\n      \"margin-bottom\": \"0.5vh\"\n    }\n  }, \"Register\")])], 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, !this.showLogin]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_16, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"form\", _hoisted_17, [_hoisted_18, (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    type: \"email\",\n    placeholder: \"Username or Email\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => this.loginUsernameOrEmail = $event)\n  }, null, 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelText, this.loginUsernameOrEmail]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"input\", {\n    id: \"loginPasswordInput\",\n    type: $data.showLoginPassword ? 'text' : 'password',\n    placeholder: \"Password\",\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => this.loginPassword = $event)\n  }, null, 8 /* PROPS */, _hoisted_19), [[vue__WEBPACK_IMPORTED_MODULE_0__.vModelDynamic, this.loginPassword]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_20, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    class: \"btn btn-primary\",\n    type: \"button\",\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.toggleShowLoginPassword && $options.toggleShowLoginPassword(...args))\n  }, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"span\", {\n    class: (0,vue__WEBPACK_IMPORTED_MODULE_0__.normalizeClass)([\"fa\", $data.showLoginPassword ? 'fa-eye' : 'fa-eye-slash'])\n  }, null, 2 /* CLASS */)])]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    onClick: _cache[13] || (_cache[13] = (0,vue__WEBPACK_IMPORTED_MODULE_0__.withModifiers)((...args) => this.login && this.login(...args), [\"prevent\"]))\n  }, \"Login\")])], 512 /* NEED_PATCH */), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, this.showLogin]]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_21, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_22, [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_23, [_hoisted_24, _hoisted_25, (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    class: \"ghost\",\n    id: \"signIn\",\n    onClick: _cache[14] || (_cache[14] = $event => $options.togglePanel(false))\n  }, \"Login\"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_router_link, {\n    to: \"/\"\n  }, {\n    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [_hoisted_26]),\n    _: 1 /* STABLE */\n  })]), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_27, [_hoisted_28, _hoisted_29, (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n    class: \"ghost\",\n    id: \"signUp\",\n    onClick: _cache[15] || (_cache[15] = $event => $options.togglePanel(true))\n  }, \"Register\"), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_router_link, {\n    to: \"/\"\n  }, {\n    default: (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(() => [_hoisted_30]),\n    _: 1 /* STABLE */\n  })])])])])]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./src/pages/LoginRegisterPage.vue?vue&type=template&id=579e4332&scoped=true\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "4b461dcebde06907"; }
/******/ }();
/******/ 
/******/ }
);